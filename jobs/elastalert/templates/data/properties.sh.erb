#!/usr/bin/env bash

# job template binding variables

# job name & index of this VM within cluster
# e.g. JOB_NAME=redis, JOB_INDEX=0
export NAME='<%= name %>'
export JOB_INDEX=<%= index %>

# full job name, like redis/0 or webapp/3
export JOB_FULL="$NAME/$JOB_INDEX"

# proxy configuration
<% if_p('elastalert.env.http_proxy') do |http_proxy| %>
export HTTP_PROXY="<%= http_proxy %>"
export http_proxy="<%= http_proxy %>"
<% end %>
<% if_p('elastalert.env.https_proxy') do |https_proxy| %>
export HTTPS_PROXY="<%= https_proxy %>"
export https_proxy="<%= https_proxy %>"
<% end %>
<% if_p('elastalert.env.no_proxy') do |no_proxy| %>
export NO_PROXY="<%= no_proxy %>"
export no_proxy="<%= no_proxy %>"
<% end %>

# elastalert executables
export EA_BIN=/var/vcap/packages/elastalert/bin

# elastalert python packages
export PYTHONPATH=/var/vcap/packages/elastalert/lib/python2.7/site-packages
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-}:/var/vcap/packages/python/lib

# elasticsearch hostname / IP and port number
<%
  elasticsearch_host = nil
  if_link("elasticsearch") { |elasticsearch_link| elasticsearch_host = elasticsearch_link.instances.first.address }
  unless elasticsearch_host
    elasticsearch_host = p("elastalert.elasticsearch.host")
  end

  elasticsearch_port = nil
  if_link("elasticsearch") { |elasticsearch_link| elasticsearch_port = elasticsearch_link.p("elasticsearch.port") }
  unless elasticsearch_port
    elasticsearch_port = p("elastalert.elasticsearch.port")
  end
%>
export ES_HOST='<%= elasticsearch_host %>'
export ES_PORT='<%= elasticsearch_port %>'

<% common = p('elastalert.rules.common') %>

<% p('elastalert.rules.rules').each do |rule| %>
cat << 'EOF' > /var/vcap/jobs/elastalert/data/rules/<%= rule['name'] %>.yaml
<%= common.merge(rule['content']).to_yaml %>
EOF
<% end %>

# create elastalert index in elasticsearch
set +e  # don't block shutdown if elastic is unavailable
$EA_BIN/elastalert-create-index --host $ES_HOST --port $ES_PORT --index elastalert_status --no-auth --no-ssl --url-prefix "" --old-index None
